{"version":3,"file":"/home/plamen/Trainings/ExpressAndTypescript/src/App.ts","sources":["/home/plamen/Trainings/ExpressAndTypescript/src/App.ts"],"names":[],"mappings":";AACA,MAAY,OAAO,WAAM,SACzB,CAAC,CADiC;AAClC,MAAY,MAAM,WAAM,QACxB,CAAC,CAD+B;AAChC,MAAY,UAAU,WAAM,aAE5B,CAAC,CAFwC;AAEzC,6BAAuB,qBACvB,CAAC,CAD2C;AAC5C,8BAAwB,sBAIxB,CAAC,CAJ6C;AAE9C,kDAAkD;AAElD;IAKA,oDAAoD;IAEhD;QACI,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,CAAA;QACxB,IAAI,CAAC,UAAU,EAAE,CAAA;QACjB,IAAI,CAAC,MAAM,EAAE,CAAA;IACjB,CAAC;IAED,gCAAgC;IAExB,UAAU;QACd,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;QAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAA;QACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC,CAAA;IAC9D,CAAC;IAEL,2BAA2B;IAEf,MAAM;QAEV;;2BAEmB;QAEnB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI;YAC3B,GAAG,CAAC,IAAI,CAAC;gBACL,OAAO,EAAE,yCAAyC;aACrD,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,oBAAU,CAAC,CAAA;QAC9C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,qBAAW,CAAC,CAAA;IACnD,CAAC;AACL,CAAC;AAED;kBAAe,IAAI,GAAG,EAAE,CAAC,OAAO,CAAA","sourcesContent":["import * as path from 'path'\nimport * as express from 'express'\nimport * as logger from 'morgan'\nimport * as bodyParser from 'body-parser'\n\nimport HeroRouter from './routes/HeroRouter'\nimport HumanRouter from './routes/HumanRouter'\n\n// Creates and configures an ExpressJS web server.\n\nclass App {\n\n    // ref to Express instance\n    public express: express.Application\n\n//Run configuration methods on the Express instance.\n\n    constructor() {\n        this.express = express()\n        this.middleware()\n        this.routes()\n    }\n\n    // Configure Express middleware.\n\n    private middleware(): void {\n        this.express.use(logger('dev'))\n        this.express.use(bodyParser.json())\n        this.express.use(bodyParser.urlencoded({extended: false}))\n    }\n\n// Configure API endpoints.\n\n    private routes(): void {\n\n        /* This is just to get up and running, and to make sure what we've got is\n         * working so far. This function will change when we start to add more\n         * API endpoints */\n\n        let router = express.Router();\n        router.get('/', (req, res, next) => {\n            res.json({\n                message: 'RESTFul API with Typescript and Node.js'\n            })\n        })\n        this.express.use('/', router);\n        this.express.use('/api/v1/heroes', HeroRouter)\n        this.express.use('/api/v1/humans', HumanRouter)\n    }\n}\n\nexport default new App().express"]}